#!/usr/bin/python
import os
import sys
import collections
import simplejson as json

# OpenStack Service Manager
#
# The main reason I am writing this is because I am not happy with the way the default
# init.d scripts work to bring up OpenStack services on boot, and the capabilities to
# restart services on the fly. OpenStack services need to brought up and shutdown in a
# very specific order to preserve functionality. This script, and the supporting JSON
# files are meant to handle this more gracefully.

# Load the OpenStack services JSON dictionaries
sm_root  = '/etc/osm'
services = json.loads(open(sm_root + '/services.json').read())
runlevel = json.loads(open(sm_root + '/services.run.json').read())
prerun   = json.loads(open(sm_root + '/services.pre.json').read())

# Get the service command and optional service name
try:    cmd = sys.argv[1]
except: 
    print "Please specify either 'start' or 'stop' as the first argument"
    exit()
try:    ts  = sys.argv[2]
except: 
    print "Please specify a specific OpenStack service, or 'all' services"
    exit()

# Make sure the command is valid
if cmd != 'start' and cmd != 'stop' and cmd != 'status':
    print "Invalid command - must be 'start', 'stop', or 'status'"
    exit()

# Get a list of pre-start services
os_prestart_raw = prerun['services']
os_prestart = collections.OrderedDict(sorted(os_prestart_raw.items(), key=lambda t: int(t[0])))
for spre_pri, spre_name in os_prestart.iteritems():
    pre_cmd = "service %s %s" % (spre_name, cmd)
    os.system(pre_cmd)

# Get a list of pre-run commands
if cmd == 'start' or cmd == 'stop':
    os_precmd_raw = prerun['runcmd'][cmd]
    os_precmd     = collections.OrderedDict(sorted(os_precmd_raw.items(), key=lambda t: int(t[0])))
    for rpre_pri, rpre_cmd in os_precmd.iteritems():
        os.system(rpre_cmd)
if cmd == 'status':
    os_precmd_start_raw = prerun['runcmd']['start']
    os_precmd_start     = collections.OrderedDict(sorted(os_precmd_start_raw.items(), key=lambda t: int(t[0])))
    for rpre_start_pri, rpre_start_cmd in os_precmd_start.iteritems():
        print "Startup command[%s]: '%s'" % (rpre_start_pri, rpre_start_cmd)
    os_precmd_stop_raw = prerun['runcmd']['stop']
    os_precmd_stop     = collections.OrderedDict(sorted(os_precmd_stop_raw.items(), key=lambda t: int(t[0])))
    for rpre_stop_pri, rpre_stop_cmd in os_precmd_stop.iteritems():
        print "Shutdown command[%s]: '%s'" % (rpre_stop_pri, rpre_stop_cmd)

# Get OpenStack services start priority
os_start_raw = {}
for service in services.iterkeys():
    start_p = services[service]['startup']
    os_start_raw[start_p] = service
os_start = collections.OrderedDict(sorted(os_start_raw.items(), key=lambda t: int(t[0])))
    
# Get the OpenStack services stop priority
os_stop_raw = {}
for service in services.iterkeys():
    stop_p = services[service]['shutdown']
    os_stop_raw[stop_p] = service
os_stop = collections.OrderedDict(sorted(os_stop_raw.items(), key=lambda t: int(t[0])))
    
# Validate the target service
def _validate_service(name):
    s_match = False
    for service in services.iterkeys():
        if ts == service:
            s_match = True
            break
    if s_match == False:
        print "Invalid target service '%s'" % ts
        exit()
    else:
        print "Service %s found" % ts
    
# Process a service block
def _proc_service_block(service):
    services_uo = services[service]['list']
    services_od = collections.OrderedDict(sorted(services_uo.items(), key=lambda t: int(t[0])))
    if service == 'horizon':
        os_service_name = 'openstack-horizon'
        os_service = 'httpd'
        if runlevel[os_service_name] == 'on':
            cmd_string = "service %s %s" % (os_service, cmd)
            os.system(cmd_string)
        else:
            print "Service %s(%s) is disabled" % (os_service_name, os_service)
    else:
        for os_priority, os_service in services_od.iteritems():
            if runlevel[os_service] == 'on':
                cmd_string = "service %s %s" % (os_service, cmd)
                os.system(cmd_string)
            else:
                print "Service %s is disabled" % os_service
    
# Start/stop services
if ts == 'all':
    for priority, service in os_start.iteritems():
        _proc_service_block(service)
else:
    _validate_service(ts)
    _proc_service_block(ts)